import {
	SpotMarketConfig,
	DriftEnv,
	initialize,
	PerpMarketConfig,
} from '@drift-labs/sdk';

export * from './chartConstants';
export * from './utils/candleUtils';
export * from './types';
export * from './EnvironmentConstants';
export * from './utils';
export * from './utils/index';
export * from './utils/s3Buckets';
export * from './serializableTypes';
export * from './utils/Candle';
export * from './utils/featureFlags';
export * from './utils/WalletConnectionState';
export * from './utils/rpcLatency';
export * from './utils/token';
export * from './common-ui-utils/commonUiUtils';
export * from './constants';

// External Program Errors
import JupV4Errors from './constants/autogenerated/jup-v4-error-codes.json';
import JupV6Errors from './constants/autogenerated/jup-v6-error-codes.json';
export { JupV4Errors, JupV6Errors };

import DriftErrors from './constants/autogenerated/driftErrors.json';
export { DriftErrors };

import MiscConstants from './constants/autogenerated/misc.json';
export { MiscConstants };

export const Config: {
	initialized: boolean;
	spotMarketsLookup: SpotMarketConfig[];
	perpMarketsLookup: PerpMarketConfig[];
	sdkConfig: ReturnType<typeof initialize>;
} = {
	initialized: false,
	spotMarketsLookup: [],
	perpMarketsLookup: [],
	sdkConfig: undefined,
};

const spotMarketsLookup: { current: SpotMarketConfig[]; initialized: boolean } =
	{
		current: [],
		initialized: false,
	};

const perpMarketsLookup: { current: PerpMarketConfig[]; initialized: boolean } =
	{
		current: [],
		initialized: false,
	};

export const Initialize = (env: DriftEnv) => {
	const SDKConfig = initialize({ env });

	const maxSpotMarketIndex = Math.max(
		...SDKConfig.SPOT_MARKETS.map((market) => market.marketIndex)
	);

	const maxPerpMarketIndex = Math.max(
		...SDKConfig.PERP_MARKETS.map((market) => market.marketIndex)
	);

	const spotMarkets = new Array(maxSpotMarketIndex);
	const markets = new Array(maxPerpMarketIndex);

	SDKConfig.SPOT_MARKETS.forEach((spotMarket) => {
		spotMarkets[spotMarket.marketIndex] = spotMarket;
	});

	SDKConfig.PERP_MARKETS.forEach((perpMarket) => {
		markets[perpMarket.marketIndex] = perpMarket;
	});

	Config.spotMarketsLookup = spotMarkets;
	Config.perpMarketsLookup = markets;

	Config.initialized = true;
};

/**
 * Get an array of banks where the bank's position in the array is the same as the bank's index
 * @returns
 */
export const GetBanksLookup = () => {
	if (!Config.initialized) throw 'Need to call Initialze on common first';

	if (!spotMarketsLookup.initialized) {
		const spotMarkets = Config.spotMarketsLookup;

		const maxBankIndex = spotMarkets.reduce((previousMax, currentValue) => {
			const currentValueNumber = currentValue.marketIndex;
			return previousMax > currentValueNumber
				? previousMax
				: currentValueNumber;
		}, 0);

		spotMarketsLookup.current = new Array(maxBankIndex);

		spotMarkets.map((bank) => {
			spotMarketsLookup.current[bank.marketIndex] = bank;
		});

		spotMarketsLookup.initialized = true;
	}

	return [...spotMarketsLookup.current];
};

/**
 * Get an array of markets where the market's position in the array is the same as the market's index
 * @returns
 */
export const GetMarketsLookup = () => {
	if (!Config.initialized) throw 'Need to call Initialze on common first';

	if (!perpMarketsLookup.initialized) {
		const perpMarkets = Config.perpMarketsLookup;

		const maxBankIndex = perpMarkets.reduce((previousMax, currentValue) => {
			const currentValueNumber = currentValue.marketIndex;
			return previousMax > currentValueNumber
				? previousMax
				: currentValueNumber;
		}, 0);

		perpMarketsLookup.current = new Array(maxBankIndex);

		perpMarkets.forEach((bank) => {
			perpMarketsLookup.current[bank.marketIndex] = bank;
		});

		perpMarketsLookup.initialized = true;
	}

	return [...perpMarketsLookup.current];
};
